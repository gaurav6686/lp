{"cells":[{"cell_type":"code","source":["string = 'BCAADDDCCACACAC'\n","class NodeTree(object):\n"," def __init__(self, left=None, right=None):\n","  self.left = left\n","  self.right = right\n"," def children(self):\n","  return (self.left, self.right)\n"," def nodes(self):\n","  return (self.left, self.right)\n"," def __str__(self):\n","  return '%s_%s' % (self.left, self.right)\n","def huffman_code_tree(node, left=True, binString=''):\n"," if type(node) is str:\n","  return {node: binString}\n"," (l, r) = node.children()\n"," d = dict()\n"," d.update(huffman_code_tree(l, True, binString + '0'))\n"," d.update(huffman_code_tree(r, False, binString + '1'))\n"," return d\n","freq = {}\n","for c in string:\n"," if c in freq:\n","  freq[c] += 1\n"," else:\n","  freq[c] = 1\n","freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n","nodes = freq\n","while len(nodes) > 1:\n"," (key1, c1) = nodes[-1]\n"," (key2, c2) = nodes[-2]\n"," nodes = nodes[:-2]\n"," node = NodeTree(key1, key2)\n"," nodes.append((node, c1 + c2))\n"," nodes = sorted(nodes, key=lambda x: x[1], reverse=True)\n","huffmanCode = huffman_code_tree(nodes[0][0])\n","print(' Char | Huffman code ')\n","print('----------------------')\n","for (char, frequency) in freq:\n"," print(' %-4r |%12s' % (char, huffmanCode[char]))"],"metadata":{"id":"paoxeZJxDnDD","executionInfo":{"status":"ok","timestamp":1699298086831,"user_tz":-330,"elapsed":415,"user":{"displayName":"","userId":""}},"outputId":"1a62891c-07ea-4126-88bc-15c8af4be064","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" Char | Huffman code \n","----------------------\n"," 'C'  |           0\n"," 'A'  |          11\n"," 'D'  |         101\n"," 'B'  |         100\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1699298095154}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}